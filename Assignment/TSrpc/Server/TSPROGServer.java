import com.distinct.rpc.*;

/**
 * <b>TSPROG Server Stub</b>
 * This class was automatically generated by Jrpcgen from the RPC/XDR file "stdin". <br>
 * TSPROG: was interface
 */

public abstract class TSPROGServer extends JRPCServer {

/** Program ID of the interface. */
public static final int TSPROG = 79;

/** Version ID of the interface. */
public static final int TSVERS = 1;

public static final int LogOn = 1;

/**
 * Constructor that creates an RPC server which implements the "TSPROG" interface.
 * @exception        RPCError Thrown if the call fails for any reason.
 */
public TSPROGServer() throws RPCError {
  super(TSPROG, TSVERS, true);

  UnregisterServer();
  RegisterServer(StartUDP(0), false);
  RegisterServer(StartTCP(0), true);
}

/**
 * Constructor that creates an RPC server which implements the "TSPROG" interface.
 * @param port       The port on which the server should be listening. If 0 is specified, an arbitrary default port will be chosen.
 * @exception        RPCError Thrown if the call fails for any reason.
 */
public TSPROGServer(int port) throws RPCError {
  super(TSPROG, TSVERS, true);

  UnregisterServer();
  RegisterServer(StartUDP(port), false);
  RegisterServer(StartTCP(port), true);
}

/**
 * Constructor that creates an RPC server which implements the "TSPROG" interface.
 * @param port       The port on which the server should be listening. If 0 is specified, an arbitrary default port will be chosen.
 * @param do_tcp     True to start a TCP server or false otherwise.
 * @param do_udp     True to start a UDP server or false otherwise.
 * @param do_rpcb    True to start an RPCBind server (portmapper) if one is not already running or false otherwise.
 * @exception        RPCError Thrown if the call fails for any reason.
 */
public TSPROGServer(int port, boolean do_tcp, boolean do_udp, boolean do_rpcb) throws RPCError {
  super(TSPROG, TSVERS, do_rpcb);

  UnregisterServer();
  if (do_udp) RegisterServer(StartUDP(port), false);
  if (do_tcp) RegisterServer(StartTCP(port), true);
}

/**
 * Constructor that creates an RPC server which implements the "TSPROG" interface.
 * @param port       The port on which the server should be listening. If 0 is specified, an arbitrary default port will be chosen.
 * @param prog_id    The program ID registered with the RPCBind server (portmapper).
 * @param do_tcp     True to start a TCP server or false otherwise.
 * @param do_udp     True to start a UDP server or false otherwise.
 * @param do_rpcb    True to start an RPCBind server (portmapper) if one is not already running or false otherwise.
 * @exception        RPCError Thrown if the call fails for any reason.
 */
public TSPROGServer(int port, int prog_id, boolean do_tcp, boolean do_udp, boolean do_rpcb) throws RPCError {
  super(prog_id, TSVERS, do_rpcb);

  UnregisterServer();
  if (do_udp) RegisterServer(StartUDP(port), false);
  if (do_tcp) RegisterServer(StartTCP(port), true);
}

/**
 * Dispatch routine which interprets the call requests sent to a server.
 * Classes which implement the actual interface must override this method.
 * @param proc       The index of the requested function.
 * @param xin        Read the input parameter from this XDR stream.
 * @param xout       Write the return parameter to this XDR stream.
 * @return           Returns true if the requested function can be served or false otherwise.
 */
public boolean DoCall(int proc, XDRStream xin, XDRStream xout) {
  try {

    switch (proc) {
      case LogOn: {
        LogOn_1_argument arg = new LogOn_1_argument();
        arg.xdr_decode(xin);
        String ret = LogOn_1(arg.arg1, arg.arg2);
        xout.xdr_encode_string(ret);
        return true;
      }

      default:
        break;
    }

    return (proc==0)?true:false;

  }
  catch (Exception e) {
    return false;
  }
}

/**
 * Override these abstract server methods to implement the server functionality.
 */

public abstract String LogOn_1(String arg1, String arg2);
}
